package agendatelefonica;


import java.awt.*;
import java.awt.event.*;
import java.awt.Graphics2D;
import java.awt.SplashScreen;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Month;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.JWindow;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author mcorneanu
 */
public class Test extends javax.swing.JFrame {

     
    DefaultListModel model;
     
    public Test() {
        this.contacts = new ArrayList<>();
        this.tempContacts = new ArrayList<>();
        this.contactsBornToday = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        Adaugare = new javax.swing.JButton();
        Editeaza = new javax.swing.JButton();
        Sterge = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        FiltruComboBox = new javax.swing.JComboBox<>();
        OrdonareComboBox = new javax.swing.JComboBox<>();
        Ordoneaza = new javax.swing.JButton();
        Filtrare = new javax.swing.JButton();
        StringFiltru = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        NumeTextField = new javax.swing.JTextField();
        PrenumeTextField = new javax.swing.JTextField();
        DataNastereTextField = new javax.swing.JTextField();
        NrTelefonTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        ResetareFiltru = new javax.swing.JButton();
        Login = new javax.swing.JButton();
        Reclame = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Deschidere = new javax.swing.JMenuItem();
        Salvare = new javax.swing.JMenuItem();
        Iesire = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        InregistrareMenuItem = new javax.swing.JMenuItem();
        Despre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jList1.setBackground(new java.awt.Color(204, 204, 204));
        jList1.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        jList1.setForeground(new java.awt.Color(0, 0, 0));
        this.model = new DefaultListModel();
        jList1.setModel(model);
        jList1.setSelectedIndex(0);
        initTextForms();

        //    String [] strings = {contacte.toString(), contacte2.toString()};
        // new javax.swing.AbstractListModel<String>()
        //    public int getSize() { return strings.length; }
        //    public String getElementAt(int i) { return strings[i]; }
        //});
jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
    public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
        jList1ValueChanged(evt);
    }
    });
    jScrollPane1.setViewportView(jList1);

    Adaugare.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Adaugare.setText("Adauga contact");
    Adaugare.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            AdaugareActionPerformed(evt);
        }
    });
    Adaugare.setEnabled(false);

    Editeaza.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Editeaza.setText("Editeaza contact");
    Editeaza.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            EditeazaActionPerformed(evt);
        }
    });
    Editeaza.setEnabled(false);

    Sterge.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Sterge.setText("Sterge contact");
    Sterge.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            StergeActionPerformed(evt);
        }
    });
    Sterge.setEnabled(false);

    jLabel1.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel1.setText("Contacts");

    jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
    jLabel2.setText("Filtrare dupa:");

    jLabel3.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel3.setText("Ordonare dupa:");

    FiltruComboBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    FiltruComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Numere de mobil", "Numere de fix", "Persoane nascute astazi", "Persoane nascute luna aceasta", "Personalizat" }));
    FiltruComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            FiltruComboBoxActionPerformed(evt);
        }
    });

    OrdonareComboBox.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    OrdonareComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nume", "Prenume", "Data nasterii (Crescator)", "Data nasterii (Descrescator)" }));
    OrdonareComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            OrdonareComboBoxActionPerformed(evt);
        }
    });

    Ordoneaza.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Ordoneaza.setText("Ordoneaza");
    Ordoneaza.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            OrdoneazaActionPerformed(evt);
        }
    });
    Ordoneaza.setEnabled(false);

    Filtrare.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Filtrare.setText("Filtrare");
    Filtrare.setMaximumSize(new java.awt.Dimension(88, 25));
    Filtrare.setMinimumSize(new java.awt.Dimension(88, 25));
    Filtrare.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            FiltrareActionPerformed(evt);
        }
    });
    Filtrare.setEnabled(false);

    StringFiltru.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    StringFiltru.setEnabled(false);

    jLabel4.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel4.setText("Filtru:");

    jLabel6.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel6.setText("Nume:");

    jLabel7.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel7.setText("Data de nastere:");

    jLabel8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel8.setText("Prenume:");

    jLabel9.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel9.setText("Numar de telefon:");

    NumeTextField.setEditable(false);
    NumeTextField.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N

    PrenumeTextField.setEditable(false);
    PrenumeTextField.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N

    DataNastereTextField.setEditable(false);
    DataNastereTextField.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N

    NrTelefonTextField.setEditable(false);
    NrTelefonTextField.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N

    jLabel5.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    jLabel5.setText("Contact Selectat");

    ResetareFiltru.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    ResetareFiltru.setText("Resetare Filtru");
    ResetareFiltru.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            ResetareFiltruActionPerformed(evt);
        }
    });
    ResetareFiltru.setEnabled(false);

    Login.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
    Login.setText("Login");
    Login.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            LoginActionPerformed(evt);
        }
    });

    jMenu1.setText("Fisiere");
    jMenu1.setToolTipText("");
    jMenu1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

    Deschidere.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
    Deschidere.setText("Deschidere");
    Deschidere.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            DeschidereActionPerformed(evt);
        }
    });
    Deschidere.setEnabled(false);
    jMenu1.add(Deschidere);

    Salvare.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
    Salvare.setText("Salvare");
    Salvare.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            SalvareActionPerformed(evt);
        }
    });
    Salvare.setEnabled(false);
    jMenu1.add(Salvare);

    Iesire.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
    Iesire.setText("Iesire");
    Iesire.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            IesireActionPerformed(evt);
        }
    });
    jMenu1.add(Iesire);

    jMenuBar1.add(jMenu1);

    jMenu2.setText("Ajutor");
    jMenu2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

    InregistrareMenuItem.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
    InregistrareMenuItem.setText("Inregistrare");
    InregistrareMenuItem.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            InregistrareMenuItemActionPerformed(evt);
        }
    });
    jMenu2.add(InregistrareMenuItem);

    Despre.setFont(new java.awt.Font("Dialog", 0, 13)); // NOI18N
    Despre.setText("Despre");
    Despre.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            DespreActionPerformed(evt);
        }
    });
    jMenu2.add(Despre);

    jMenuBar1.add(jMenu2);

    setJMenuBar(jMenuBar1);
    orderType = CriteriuOrdonare.DUPA_NUME;

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(Adaugare, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Editeaza, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                .addGroup(layout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(64, 64, 64)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(Reclame, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(Sterge, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jLabel6)
                    .addContainerGap(655, Short.MAX_VALUE))
                .addGroup(layout.createSequentialGroup()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel3)
                        .addComponent(jLabel4)
                        .addComponent(jLabel8)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(15, 15, 15)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(OrdonareComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(13, 13, 13)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(Filtrare, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ResetareFiltru, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(StringFiltru, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(FiltruComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 544, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(Login, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(PrenumeTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                                        .addComponent(NumeTextField, javax.swing.GroupLayout.Alignment.LEADING))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel5)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(DataNastereTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel9)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(NrTelefonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 245, Short.MAX_VALUE)
                    .addComponent(Ordoneaza, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(220, Short.MAX_VALUE))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addGap(27, 27, 27)
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(17, 17, 17)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(OrdonareComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(Ordoneaza, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(15, 15, 15)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(FiltruComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(StringFiltru, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Filtrare, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ResetareFiltru, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(31, 31, 31)
                    .addComponent(jLabel5)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(75, 75, 75)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(jLabel9)
                                .addComponent(PrenumeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(NrTelefonTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(NumeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DataNastereTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGap(18, 18, 18)
                    .addComponent(Reclame, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addComponent(jScrollPane1))
            .addGap(18, 18, 18)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(Sterge, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Editeaza, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Adaugare, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(Login, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void EditeazaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditeazaActionPerformed
        Test.valueFromList = this.jList1.getSelectedValue();
        int index = this.jList1.getSelectedIndex();
        String [] argumente = Test.valueFromList.split(", ");
        String [] argumenteDataNastere = argumente[2].split("-");
        Contact toDeleteContact = null;
        if(verifyMobileOrFix(argumente[1]) == 0) {
            
            toDeleteContact = new Contact(argumente[0].split(" ")[0],
                                            argumente[0].split(" ")[1],
                                            new NrMobil(argumente[1]),
                                            Integer.parseInt(argumenteDataNastere[2]),
                                            Integer.parseInt(argumenteDataNastere[1]),
                                            Integer.parseInt(argumenteDataNastere[0]));

        } else if (verifyMobileOrFix(argumente[1]) == 1) {
            toDeleteContact = new Contact(argumente[0].split(" ")[0],
                                argumente[0].split(" ")[1],
                                new NrFix(argumente[1]),
                                Integer.parseInt(argumenteDataNastere[2]),
                                Integer.parseInt(argumenteDataNastere[1]),
                                Integer.parseInt(argumenteDataNastere[0]));            
        }
         
        try {
            savedIndex = findElementId(toDeleteContact);
            deleteFromJson(savedIndex);
        } catch (IOException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
        contacts.remove(index);
        EditareContact windowEditareContact = new EditareContact();
        windowEditareContact.setVisible(true);
        windowEditareContact.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.Adaugare.setEnabled(false);
        this.Editeaza.setEnabled(false);
        this.Sterge.setEnabled(false);
        this.Ordoneaza.setEnabled(false);
        this.Filtrare.setEnabled(false);
    }//GEN-LAST:event_EditeazaActionPerformed

    private void AdaugareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdaugareActionPerformed
        AdaugareContact windowAdaugareContact = new AdaugareContact();
        windowAdaugareContact.setVisible(true);
        windowAdaugareContact.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        this.Adaugare.setEnabled(false);
        this.Editeaza.setEnabled(false);
        this.Sterge.setEnabled(false);
        this.Ordoneaza.setEnabled(false);
        this.Filtrare.setEnabled(false);

    }//GEN-LAST:event_AdaugareActionPerformed

    private void FiltruComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltruComboBoxActionPerformed
        if (null != this.FiltruComboBox.getSelectedItem().toString()) switch (this.FiltruComboBox.getSelectedItem().toString()) {
            case "Numere de mobil":
                filterType = CriteriuFiltrare.DUPA_NUMAR_MOBIL;
                break;
            case "Numere de fix":
                filterType = CriteriuFiltrare.DUPA_NUMAR_FIX;
                break;
            case "Persoane nascute astazi":
                filterType = CriteriuFiltrare.DUPA_DATA_NASTERE_AZI;
                break;
            case "Persoane nascute luna aceasta":
                filterType = CriteriuFiltrare.DUPA_DATA_NASTERE_LUNA;
                break;
            case "Personalizat":
                filterType = CriteriuFiltrare.PERSONALIZAT;
                break;
            default:
                break;
        }
    }//GEN-LAST:event_FiltruComboBoxActionPerformed

    private void OrdoneazaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdoneazaActionPerformed
        switch (orderType.toString()) {
            case "DUPA_NUME":
                Collections.sort(contacts, dupaNume);
                break;
            case "DUPA_PRENUME":
                Collections.sort(contacts, dupaPrenume);
                break;
            case "DUPA_DATA_NASTERE_CRESCATOR":
                Collections.sort(contacts, dupaDataNastereCrescator);
                break;
            case "DUPA_DATA_NASTERE_DESCRESCATOR":
                Collections.sort(contacts, dupaDataNastereDescrescator);
                break;
            default:
                break;
        }
        refreshList();
    }//GEN-LAST:event_OrdoneazaActionPerformed

    private void FiltrareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FiltrareActionPerformed
        LocalDate currentDate = LocalDate.now();
        switch (filterType.toString()) {
            case "DUPA_NUMAR_MOBIL":
                filtredContacts = contacts.stream().
                        filter(c -> c.getNumarTelefon().toString().startsWith("07")).
                        collect(Collectors.toCollection(ArrayList::new));
                break;
            case "DUPA_NUMAR_FIX":
                filtredContacts = contacts.stream().
                        filter(c -> c.getNumarTelefon().toString().startsWith("02") || c.getNumarTelefon().toString().startsWith("03")).
                        collect(Collectors.toCollection(ArrayList::new));
                break;
            case "DUPA_DATA_NASTERE_AZI":
                
                filtredContacts = contacts.stream().
                        filter(c -> c.getDataNastere().getDayOfMonth() == currentDate.getDayOfMonth() &&
                                    c.getDataNastere().getMonthValue() == currentDate.getMonthValue()).
                        collect(Collectors.toCollection(ArrayList::new));
                break;
            case "DUPA_DATA_NASTERE_LUNA":
                filtredContacts = contacts.stream().
                        filter(c -> c.getDataNastere().getDayOfMonth() > currentDate.getDayOfMonth() &&
                                    c.getDataNastere().getMonthValue() == currentDate.getMonthValue()).
                        collect(Collectors.toCollection(ArrayList::new));
                break;
            case "PERSONALIZAT":
                String stringToFind = this.StringFiltru.getText().toLowerCase();
                filtredContacts = contacts.stream().
                        filter(c -> c.getNumarTelefon().toString().contains(stringToFind) ||
                                    c.getNume().toLowerCase().contains(stringToFind) ||
                                    c.getPrenume().toLowerCase().contains(stringToFind)).
                        collect(Collectors.toCollection(ArrayList::new));
                break;
 
            default:
                break;
        }
        showFiltredList();
    }//GEN-LAST:event_FiltrareActionPerformed

    private void DeschidereActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeschidereActionPerformed
        JFrame frame = new Test();
        JFileChooser chooserOpen = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("json", "json");
        chooserOpen.setFileFilter(filter);
        int returnVal = chooserOpen.showOpenDialog(frame);       
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            this.jsonPath = chooserOpen.getSelectedFile().getAbsolutePath();
        }
        Object obj = null;
        contacts.removeAll(contacts);
        tempContacts.removeAll(tempContacts);
        LocalDate currentDate = LocalDate.now();
        

        try {
            obj = new JSONParser().parse(new FileReader(this.jsonPath));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ParseException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
        JSONObject jo = (JSONObject) obj;
        
        String numberOfContacts = (String) jo.get("numarul_contactelor");
        
        for(int i = 1; i <= Integer.parseInt(numberOfContacts); i++) {
            if((Map)jo.get("contact" + String.valueOf(i)) != null) {
                Contact tempContact = null;
                Map contact = ((Map)jo.get("contact" + String.valueOf(i)));
                String [] birthDate = contact.get("data_nastere").toString().split("-");
                int year = Integer.parseInt(birthDate[0]);
                int month = Integer.parseInt(birthDate[1]);
                int day = Integer.parseInt(birthDate[2]);
                int errorCode = verificareAgenda(contact.get("nume").toString(), 
                                                    contact.get("prenume").toString(),
                                                    contact.get("numar_telefon").toString(),
                                                    day, month, year);
//                System.out.println(errorCode);
                
                switch (errorCode) {
                    case 0:
                        if (contact.get("numar_telefon").toString().startsWith("07")) {
                            tempContact = new Contact(contact.get("nume").toString(),
                                    contact.get("prenume").toString(),
                                    new NrMobil(contact.get("numar_telefon").toString()),
                                    day, month, year);
                        } else {
                            tempContact = new Contact(contact.get("nume").toString(),
                                    contact.get("prenume").toString(),
                                    new NrFix(contact.get("numar_telefon").toString()),
                                    day, month, year);
                        }   
                        tempContacts.add(tempContact);
                        if(day == currentDate.getDayOfMonth() && month == currentDate.getMonthValue()){
                            if(day == currentDate.getDayOfMonth() && month == currentDate.getMonthValue()){
                                JOptionPane.showMessageDialog(frame,
                                    "Astazi este ziua de nastere a lui : " + contact.get("nume").toString() + " " + contact.get("nume").toString());
                                }
                        }
                        
                        break;
                    case -1:
                        JOptionPane.showMessageDialog(frame,
                            "Formatul numelui pentru contact" + i + " este incorect!" ,"Error",
                            JOptionPane.ERROR_MESSAGE);
                        break;
                    case -2:
                        JOptionPane.showMessageDialog(frame,
                            "Formatul prenumelui pentru contact" + i + " este incorect!" ,"Error",
                            JOptionPane.ERROR_MESSAGE);
                        break;
                    case -3:
                        JOptionPane.showMessageDialog(frame,
                            "Formatul numarului de telefon pentru contact" + i + " este incorect!" ,"Error",
                            JOptionPane.ERROR_MESSAGE);
                        break;
                    case -4:
                        JOptionPane.showMessageDialog(frame,
                            "Formatul datei de nastere pentru contact" + i + " este incorect!" ,"Error",
                            JOptionPane.ERROR_MESSAGE);
                        break;    
                    default:
                        break;
                }
            }      
        }
        contacts.addAll(tempContacts);
        refreshList();
        
    }//GEN-LAST:event_DeschidereActionPerformed

    private void SalvareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalvareActionPerformed
        JFrame frame = new Test();
        JFileChooser chooserSave = new JFileChooser();
        chooserSave.setCurrentDirectory(new File(System.getProperty("user.home")));
        chooserSave.setDialogTitle("Specificati un fisier pentru a salva datele:");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("json", "json");
        chooserSave.setFileFilter(filter);
        int returnVal = chooserSave.showSaveDialog(frame);       
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            this.jsonPath = chooserSave.getSelectedFile().getAbsolutePath();
        } else {
            return;
        }
        if(!this.jsonPath.contains(".json")) {
            this.jsonToSavePath =  this.jsonPath.concat(".json"); 
        } else {
            this.jsonToSavePath = this.jsonPath;
        }
        File myJsonFile = new File(this.jsonToSavePath);
        try {
            if(myJsonFile.createNewFile()) {
                
            } else {
                if(JOptionPane.showConfirmDialog(frame, "Acest fisier deja exista. Doriti sa il rescrieti?") == JOptionPane.OK_OPTION){
                    myJsonFile.delete();
                    myJsonFile.createNewFile();
                }
            }
        } catch (IOException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }        
        
        try {
            writeToNewJson(contacts);
        } catch (IOException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_SalvareActionPerformed

    private void InregistrareMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InregistrareMenuItemActionPerformed
        Inregistrare windowInregistrare = new Inregistrare();
        windowInregistrare.setVisible(true);
    }//GEN-LAST:event_InregistrareMenuItemActionPerformed

    private void IesireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IesireActionPerformed
        if(JOptionPane.showConfirmDialog(jMenu1,  "Sunteti sigur ca doriti sa inchideti aplicatia?") == JOptionPane.OK_OPTION) {
            System.exit(0);       
        }
    }//GEN-LAST:event_IesireActionPerformed

    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        if (evt.getValueIsAdjusting()) {
            return;
        }
        initTextForms();

    }//GEN-LAST:event_jList1ValueChanged
    
    private void StergeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StergeActionPerformed

        int index = this.jList1.getSelectedIndex();
        String [] argumente = Test.valueFromList.split(", ");
        String [] argumenteDataNastere = argumente[2].split("-");
        Contact toDeleteContact = null;
        
        if(JOptionPane.showConfirmDialog(jMenu1,
                "Doriti sa stergeti contactul : " +argumente[0].split(" ")[0] + " " + argumente[0].split(" ")[1] + "?","Warning",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
            
            if(verifyMobileOrFix(argumente[1]) == 0) {     
                toDeleteContact = new Contact(argumente[0].split(" ")[0],
                                            argumente[0].split(" ")[1],
                                            new NrMobil(argumente[1]),
                                            Integer.parseInt(argumenteDataNastere[2]),
                                            Integer.parseInt(argumenteDataNastere[1]),
                                            Integer.parseInt(argumenteDataNastere[0]));

            } else if (verifyMobileOrFix(argumente[1]) == 1) {
                toDeleteContact = new Contact(argumente[0].split(" ")[0],
                                    argumente[0].split(" ")[1],
                                    new NrFix(argumente[1]),
                                    Integer.parseInt(argumenteDataNastere[2]),
                                    Integer.parseInt(argumenteDataNastere[1]),
                                    Integer.parseInt(argumenteDataNastere[0]));            
            }

            try {
                savedIndex = findElementId(toDeleteContact);
                deleteFromJson(savedIndex);
            } catch (IOException ex) {
                Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
            }
            contacts.remove(index);
            refreshList();     
        }
        
        
    }//GEN-LAST:event_StergeActionPerformed

    private void OrdonareComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrdonareComboBoxActionPerformed
        if (null != this.OrdonareComboBox.getSelectedItem().toString()) switch (this.OrdonareComboBox.getSelectedItem().toString()) {
            case "Nume":
                orderType = CriteriuOrdonare.DUPA_NUME;
                break;
            case "Prenume":
                orderType = CriteriuOrdonare.DUPA_PRENUME;
                break;
            case "Data nasterii (Crescator)":
                orderType = CriteriuOrdonare.DUPA_DATA_NASTERE_CRESCATOR;
                break;
            case "Data nasterii (Descrescator)":
                orderType = CriteriuOrdonare.DUPA_DATA_NASTERE_DESCRESCATOR;
            default:
                break;
        }
    }//GEN-LAST:event_OrdonareComboBoxActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        JFrame frame = new Test();
        if(AdaugareContact.testBoolAdd) {
            AdaugareContact.testBoolAdd = false;
            try {
                addNewContactToList(AdaugareContact.getValueOfNewContact());
            } catch (IOException | ParseException ex) {
                Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
            }
            initFullInterface();
        } else if (EditareContact.testBoolEdit) {
            EditareContact.testBoolEdit = false;
            try {
                addNewContactToList(EditareContact.getValueOfNewContact());
            } catch (IOException | ParseException ex) {
                Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
            }
            initFullInterface();
        }  else if (Inregistrare.autentificare) {
            if(password.equals(Inregistrare.password)) {
                initFullInterface();
            } else {
                JOptionPane.showMessageDialog(frame,
                    "Parola Incorecta" ,"Error",
                    JOptionPane.ERROR_MESSAGE);
                Inregistrare.autentificare = false;
            }
            
        }

    }//GEN-LAST:event_formWindowGainedFocus

    private void ResetareFiltruActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetareFiltruActionPerformed
        refreshList();
    }//GEN-LAST:event_ResetareFiltruActionPerformed

    private void DespreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DespreActionPerformed
        DespreWindow windowDespre = new DespreWindow();
        windowDespre.setVisible(true);
        windowDespre.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_DespreActionPerformed

    private void LoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoginActionPerformed
        Inregistrare windowInregistrare = new Inregistrare();
        windowInregistrare.setVisible(true);
        windowInregistrare.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_LoginActionPerformed

        
    public void initFullInterface() {
        this.Adaugare.setEnabled(true);
        this.Editeaza.setEnabled(true);
        this.Sterge.setEnabled(true);
        this.Ordoneaza.setEnabled(true);
        this.Filtrare.setEnabled(true);
        this.Deschidere.setEnabled(true);
        this.Salvare.setEnabled(true);
        this.ResetareFiltru.setEnabled(true);
        this.StringFiltru.setEnabled(true);
        this.InregistrareMenuItem.setEnabled(false);
    }

    public int verifyMobileOrFix(String nrTel) {
    // return 0 for Mobile Phone or 1 for Fix Phone or -1 if it's not a valid phone number
        if(nrTel.startsWith("07")) {
            return 0;
        } else if(nrTel.startsWith("02") || nrTel.startsWith("03")) {
            return 1;
        }
        return -1;
}

    public Map createMapForJson(Contact contact) {
        Map m = new LinkedHashMap();
        m.put("nume", contact.getNume());
        m.put("prenume", contact.getPrenume());
        m.put("data_nastere", contact.getDataNastere().toString());
        m.put("numar_telefon", contact.getNumarTelefon().toString());
        return m;
    }
    
    public void addToJson(Contact newContact) throws FileNotFoundException, IOException{
        
        Object obj = null;
        try {
            obj = new JSONParser().parse(new FileReader(this.jsonPath));
        } catch (ParseException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
        JSONObject jo = (JSONObject) obj;
        
        Map m = createMapForJson(newContact);
        int nrContact = Integer.parseInt((String) jo.get("numarul_contactelor")) + 1;
        if(savedIndex != 0) {
            jo.put("contact" + String.valueOf(savedIndex), m);
            
        } else {
            jo.put("contact" + String.valueOf(nrContact), m);
            jo.put("numarul_contactelor", String.valueOf(nrContact));
        }
        
        try (PrintWriter pw = new PrintWriter(this.jsonPath)) {
            pw.write(jo.toJSONString());
            pw.flush();
        }
    } 
    
    public void writeToNewJson(ArrayList<Contact> contacts) throws FileNotFoundException, IOException {
        JSONObject jo = new JSONObject();
        for(int i = 0; i < contacts.size(); i++) {
            Map m = createMapForJson(contacts.get(i));
            jo.put("contact" + String.valueOf(i+1), m);
        }
        jo.put("numarul_contactelor", String.valueOf(contacts.size()));
        try (PrintWriter pw = new PrintWriter(this.jsonToSavePath)) {
            pw.write(jo.toJSONString());
            pw.flush();
        }
    }
    
    public int findElementId(Contact contact) {
        Object obj = null;

        try {
            obj = new JSONParser().parse(new FileReader(this.jsonPath));
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException | ParseException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
        JSONObject jo = (JSONObject) obj;
        
        String numberOfContacts = (String) jo.get("numarul_contactelor");
        
        for(int i = 1; i <= Integer.parseInt(numberOfContacts); i++) {
            if((Map)jo.get("contact" + String.valueOf(i)) != null) {
                Map contactMap = ((Map)jo.get("contact" + String.valueOf(i)));
                String [] birthDate = contactMap.get("data_nastere").toString().split("-");
                int year = Integer.parseInt(birthDate[0]);
                int month = Integer.parseInt(birthDate[1]);
                int day = Integer.parseInt(birthDate[2]);
                if(contact.getNume().equals(contactMap.get("nume").toString()) &&
                    contact.getPrenume().equals(contactMap.get("prenume").toString()) &&
                    contact.getNumarTelefon().toString().equals(contactMap.get("numar_telefon").toString()) &&
                    contact.getDataNastere().getDayOfMonth() == day &&
                    contact.getDataNastere().getMonthValue() == month &&
                    contact.getDataNastere().getYear() == year
                ) {
                    return i;
                }   
            }
        }
        return 0;
    }
    
    public void deleteFromJson(int index) throws FileNotFoundException, IOException {
        Object obj = null;
        try {
            obj = new JSONParser().parse(new FileReader(this.jsonPath));
        } catch (ParseException ex) {
            Logger.getLogger(Test.class.getName()).log(Level.SEVERE, null, ex);
        }
        JSONObject jo = (JSONObject) obj;
        
        jo.remove("contact" + index);
//        jo.put("numarul_contactelor", Integer.parseInt(jo.get("numarul_contactelor").toString()) - 1);
        
        try (PrintWriter pw = new PrintWriter("./src/agendatelefonica/Contacts.json")) {
            pw.write(jo.toJSONString());
            pw.flush();
        }
    }
    
    public void addNewContactToList(Contact newContact) throws FileNotFoundException, IOException, ParseException {
        LocalDate currentDate = LocalDate.now();
        int errorCodeDuplicate = verificareDuplicate(contacts, newContact);
        int errorCodeValidareDate = verificareAgenda(newContact.getNume(),
                                                        newContact.getPrenume(),
                                                        newContact.getNumarTelefon().toString(),
                                                        newContact.getDataNastere().getDayOfMonth(),
                                                        newContact.getDataNastere().getMonthValue(),
                                                        newContact.getDataNastere().getYear());
        
        
        
        if(errorCodeDuplicate != 0) {
            JOptionPane.showMessageDialog(jMenu1,
                "Contact existent!" ,"Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if(newContact.getDataNastere().getDayOfMonth() == currentDate.getDayOfMonth() &&
            newContact.getDataNastere().getMonthValue() == currentDate.getMonthValue()){
            JOptionPane.showMessageDialog(jMenu1,
                "Astazi este ziua de nastere a lui : " + newContact.getNume() + " " + newContact.getPrenume());
            }
        
            addToJson(newContact);
            contacts.add(newContact);

            this.model = new DefaultListModel();

            contacts.forEach((contact) -> {
                model.addElement(contact.toString());
            });
            jList1.setModel(model);
            jList1.setSelectedIndex(0);
        
    }
    
    public void refreshList() {
    
        this.model = new DefaultListModel();
        
        contacts.forEach((contact) -> {
            model.addElement(contact.toString());
        });
        jList1.setModel(model);
        jList1.setSelectedIndex(0);
    }
        
    public void showFiltredList() {
    
        this.model = new DefaultListModel();
        
        filtredContacts.forEach((contact) -> {
            model.addElement(contact.toString());
        });
        jList1.setModel(model);
        jList1.setSelectedIndex(0);
    }

    private void initTextForms() {
        if(!this.jList1.isSelectionEmpty()) {
            Test.valueFromList = this.jList1.getSelectedValue();
            String [] argumente = Test.valueFromList.split(", ");
            String nume = argumente[0].split(" ")[0];
            String prenume = argumente[0].split(" ")[1];
            String nrTelefon = argumente[1];
            String dataDeNastere = argumente[2];
            this.NumeTextField.setText(nume);
            this.PrenumeTextField.setText(prenume);
            this.NrTelefonTextField.setText(nrTelefon);
            this.DataNastereTextField.setText(dataDeNastere);
            this.DataNastereTextField.setEditable(false);
            this.NrTelefonTextField.setEditable(false);
            this.PrenumeTextField.setEditable(false);
            this.NumeTextField.setEditable(false);
        } else {
            this.NumeTextField.setText("");
            this.PrenumeTextField.setText("");
            this.NrTelefonTextField.setText("");
            this.DataNastereTextField.setText("");
        }
    }
    
    private int verificareDuplicate(ArrayList<Contact> contacte, Contact newContact) {
        /*
            Functia se ocupa de verificare de duplicate in lista de contacte
                return 1 daca exista duplicate
                return 0 daca nu exista duplicate
        */
        
        for(Contact contact : contacte) {

            if(contact.getNume().toLowerCase().equals(newContact.getNume().toLowerCase()) && 
                    contact.getPrenume().toLowerCase().equals(newContact.getPrenume().toLowerCase()) &&
                    contact.getNumarTelefon().toString().equals(newContact.getNumarTelefon().toString()) &&
                    contact.getDataNastere().toString().equals(newContact.getDataNastere().toString())
                    ) {
                
                return 1;
            }
                    
                    
        }
        
        return 0;
        
    }
    
    private int verificareAgenda(String nume, String prenume, String nrTelefon, int day, int month, int year) {
    /*
      Functia se ocupa de verificarea corectitudinii valorilor din fisier
        return 0 daca totul este corect
        return -1 daca numele este gresit
        return -2 daca prenumele este gresit
        return -3 daca numarul de telefon este gresit
        return -4 daca data este gresita
     */
    
        if(nume.contains("0") || 
                nume.contains("1") ||
                nume.contains("2") ||
                nume.contains("3") ||
                nume.contains("4") ||
                nume.contains("5") ||
                nume.contains("6") ||
                nume.contains("7") ||
                nume.contains("8") ||
                nume.contains("9") ||
                nume.length() < 2) {
            
            return -1;
        
        }
        if(prenume.contains("0") || 
                prenume.contains("1") ||
                prenume.contains("2") ||
                prenume.contains("3") ||
                prenume.contains("4") ||
                prenume.contains("5") ||
                prenume.contains("6") ||
                prenume.contains("7") ||
                prenume.contains("8") ||
                prenume.contains("9") ||
                prenume.length() < 2) {
            
            return -2;
        
        }
        
        if((!nrTelefon.startsWith("07") &&
                !nrTelefon.startsWith("02") &&
                !nrTelefon.startsWith("03")) ||
                nrTelefon.length() != 10) {
            
            return -3;
        }
        if(day < 1 ||
                day > 31 ||
                month < 1 ||
                month > 12 ||
                year < 1900 ||
                year > 2021) {
            
            return -4;
        }
        
        return 0;
    }
    
    Comparator dupaNume = (Comparator) (Object o1, Object o2) -> {
        Contact c1 = (Contact)o1;
        Contact c2 = (Contact)o2;
        return c1.getNume().compareToIgnoreCase(c2.getNume());
    };
    
    Comparator dupaPrenume = (Comparator) (Object o1, Object o2) -> {
        Contact c1 = (Contact)o1;
        Contact c2 = (Contact)o2;
        return c1.getPrenume().compareToIgnoreCase(c2.getPrenume());
    };
    
    Comparator dupaDataNastereDescrescator = (Comparator) (Object o1, Object o2) -> {
        Contact c1 = (Contact)o1;
        Contact c2 = (Contact)o2;
        return c1.getDataNastere().compareTo(c2.getDataNastere());
    };
    
    Comparator dupaDataNastereCrescator = (Comparator) (Object o1, Object o2) -> {
        Contact c1 = (Contact)o1;
        Contact c2 = (Contact)o2;
        return c2.getDataNastere().compareTo(c1.getDataNastere());
    };
    
    public static void displaySplashScreen() {

        String imgPath = "./resources/agenda.png";

        JWindow window = new JWindow();
        window.getContentPane().add(
        new JLabel("", new ImageIcon(imgPath), SwingConstants.CENTER));
        Dimension ss = Toolkit.getDefaultToolkit ().getScreenSize ();
        Dimension frameSize = new Dimension ( 500, 300 );
        window.setBounds(ss.width / 2 - frameSize.width / 2, ss.height / 2 - frameSize.height / 2, frameSize.width, frameSize.height);
        window.setVisible(true);
        try {
            Thread.sleep(3000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        window.setVisible(false);
        window.dispose();
    }
    
  
    public static void main(String args[]) throws MalformedURLException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        JFrame mainFrame = new Test();
        mainFrame.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        displaySplashScreen();
  
        mainFrame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                if(JOptionPane.showConfirmDialog(mainFrame, "Sunteti sigur ca vreti sa inchideti aplicatia?") == JOptionPane.OK_OPTION){
                    mainFrame.setVisible(false);
                    System.exit(0);
                }
            }
        });
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mainFrame.setVisible(true);
                JOptionPane.showMessageDialog(mainFrame,
                    "Ca sa puteti folosi aplicatia trebuie sa va inregistrezi!");
            }
        });
    }
    

    
    public static String valueFromList;
    private ArrayList<Contact> contacts;
    private ArrayList<Contact> tempContacts;
    private CriteriuOrdonare orderType;
    private CriteriuFiltrare filterType = CriteriuFiltrare.DUPA_NUMAR_MOBIL;
    private ArrayList<Contact> filtredContacts = new ArrayList<>();
    private int savedIndex = 0;
    private ArrayList<Contact> contactsBornToday;
    final String password = "asd";
    public String jsonPath = System.getProperty("user.dir").concat("/src/agendatelefonica/Contacts.json");
    public String jsonToSavePath = null;
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Adaugare;
    private javax.swing.JTextField DataNastereTextField;
    private javax.swing.JMenuItem Deschidere;
    private javax.swing.JMenuItem Despre;
    private javax.swing.JButton Editeaza;
    private javax.swing.JButton Filtrare;
    private javax.swing.JComboBox<String> FiltruComboBox;
    private javax.swing.JMenuItem Iesire;
    private javax.swing.JMenuItem InregistrareMenuItem;
    private javax.swing.JButton Login;
    private javax.swing.JTextField NrTelefonTextField;
    private javax.swing.JTextField NumeTextField;
    private javax.swing.JComboBox<String> OrdonareComboBox;
    private javax.swing.JButton Ordoneaza;
    private javax.swing.JTextField PrenumeTextField;
    private static javax.swing.JLabel Reclame;
    private javax.swing.JButton ResetareFiltru;
    private javax.swing.JMenuItem Salvare;
    private javax.swing.JButton Sterge;
    private javax.swing.JTextField StringFiltru;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    
    }
